<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('DdPortfolio', 'doctrine');

/**
 * BaseDdPortfolio
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $image
 * @property string $url
 * @property integer $status_id
 * @property integer $client_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property string $slug
 * @property DdClient $DdClient
 * @property DdStatus $DdStatus
 * @property Doctrine_Collection $DdPortfolioCommit
 * @property Doctrine_Collection $DdPortfolioSkill
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getDescription()       Returns the current record's "description" value
 * @method string              getImage()             Returns the current record's "image" value
 * @method string              getUrl()               Returns the current record's "url" value
 * @method integer             getStatusId()          Returns the current record's "status_id" value
 * @method integer             getClientId()          Returns the current record's "client_id" value
 * @method timestamp           getCreatedAt()         Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()         Returns the current record's "updated_at" value
 * @method string              getSlug()              Returns the current record's "slug" value
 * @method DdClient            getDdClient()          Returns the current record's "DdClient" value
 * @method DdStatus            getDdStatus()          Returns the current record's "DdStatus" value
 * @method Doctrine_Collection getDdPortfolioCommit() Returns the current record's "DdPortfolioCommit" collection
 * @method Doctrine_Collection getDdPortfolioSkill()  Returns the current record's "DdPortfolioSkill" collection
 * @method DdPortfolio         setId()                Sets the current record's "id" value
 * @method DdPortfolio         setName()              Sets the current record's "name" value
 * @method DdPortfolio         setDescription()       Sets the current record's "description" value
 * @method DdPortfolio         setImage()             Sets the current record's "image" value
 * @method DdPortfolio         setUrl()               Sets the current record's "url" value
 * @method DdPortfolio         setStatusId()          Sets the current record's "status_id" value
 * @method DdPortfolio         setClientId()          Sets the current record's "client_id" value
 * @method DdPortfolio         setCreatedAt()         Sets the current record's "created_at" value
 * @method DdPortfolio         setUpdatedAt()         Sets the current record's "updated_at" value
 * @method DdPortfolio         setSlug()              Sets the current record's "slug" value
 * @method DdPortfolio         setDdClient()          Sets the current record's "DdClient" value
 * @method DdPortfolio         setDdStatus()          Sets the current record's "DdStatus" value
 * @method DdPortfolio         setDdPortfolioCommit() Sets the current record's "DdPortfolioCommit" collection
 * @method DdPortfolio         setDdPortfolioSkill()  Sets the current record's "DdPortfolioSkill" collection
 * 
 * @package    scss
 * @subpackage model
 * @author     David Durost
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDdPortfolio extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('dd_portfolio');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('image', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'default.png',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('url', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('status_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '2',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('client_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('DdClient', array(
             'local' => 'client_id',
             'foreign' => 'id'));

        $this->hasOne('DdStatus', array(
             'local' => 'status_id',
             'foreign' => 'id'));

        $this->hasMany('DdPortfolioCommit', array(
             'local' => 'id',
             'foreign' => 'portfolio_id'));

        $this->hasMany('DdPortfolioSkill', array(
             'local' => 'id',
             'foreign' => 'dd_portfolio_id'));
    }
}